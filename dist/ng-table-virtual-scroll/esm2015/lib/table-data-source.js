import { combineLatest, merge, of, Subject } from 'rxjs';
import { map } from 'rxjs/operators';
import { MatTableDataSource } from '@angular/material/table';
export class TableVirtualScrollDataSource extends MatTableDataSource {
    _updateChangeSubscription() {
        this.initRenderedRangeStream();
        const _sort = this['_sort'];
        const _paginator = this['_paginator'];
        const _internalPageChanges = this['_internalPageChanges'];
        const _filter = this['_filter'];
        const _renderData = this['_renderData'];
        const sortChange = _sort ?
            merge(_sort.sortChange, _sort.initialized) :
            of(null);
        const pageChange = _paginator ?
            merge(_paginator.page, _internalPageChanges, _paginator.initialized) :
            of(null);
        const dataStream = this['_data'];
        const filteredData = combineLatest([dataStream, _filter])
            .pipe(map(([data]) => this._filterData(data)));
        const orderedData = combineLatest([filteredData, sortChange])
            .pipe(map(([data]) => this._orderData(data)));
        const paginatedData = combineLatest([orderedData, pageChange])
            .pipe(map(([data]) => this._pageData(data)));
        const sliced = combineLatest([paginatedData, this.renderedRangeStream.asObservable()])
            .pipe(map(([data, { start, end }]) => start == null || end == null ? data : data.slice(start, end)));
        this._renderChangesSubscription.unsubscribe();
        this._renderChangesSubscription = sliced.subscribe(data => _renderData.next(data));
    }
    initRenderedRangeStream() {
        if (!this.renderedRangeStream) {
            this.renderedRangeStream = new Subject();
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUtZGF0YS1zb3VyY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy10YWJsZS12aXJ0dWFsLXNjcm9sbC8iLCJzb3VyY2VzIjpbImxpYi90YWJsZS1kYXRhLXNvdXJjZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQW1CLGFBQWEsRUFBRSxLQUFLLEVBQWMsRUFBRSxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN0RixPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFJckMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFFN0QsTUFBTSxPQUFPLDRCQUFnQyxTQUFRLGtCQUFxQjtJQUd4RSx5QkFBeUI7UUFDdkIsSUFBSSxDQUFDLHVCQUF1QixFQUFFLENBQUM7UUFDL0IsTUFBTSxLQUFLLEdBQW1CLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM1QyxNQUFNLFVBQVUsR0FBd0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQzNELE1BQU0sb0JBQW9CLEdBQWtCLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1FBQ3pFLE1BQU0sT0FBTyxHQUE0QixJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDekQsTUFBTSxXQUFXLEdBQXlCLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUU5RCxNQUFNLFVBQVUsR0FBbUMsS0FBSyxDQUFDLENBQUM7WUFDeEQsS0FBSyxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDLFdBQVcsQ0FBNEIsQ0FBQyxDQUFDO1lBQ3ZFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNYLE1BQU0sVUFBVSxHQUF3QyxVQUFVLENBQUMsQ0FBQztZQUNsRSxLQUFLLENBQ0gsVUFBVSxDQUFDLElBQUksRUFDZixvQkFBb0IsRUFDcEIsVUFBVSxDQUFDLFdBQVcsQ0FDUyxDQUFDLENBQUM7WUFDbkMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ1gsTUFBTSxVQUFVLEdBQW9CLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNsRCxNQUFNLFlBQVksR0FBRyxhQUFhLENBQUMsQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLENBQUM7YUFDdEQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2pELE1BQU0sV0FBVyxHQUFHLGFBQWEsQ0FBQyxDQUFDLFlBQVksRUFBRSxVQUFVLENBQUMsQ0FBQzthQUMxRCxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDaEQsTUFBTSxhQUFhLEdBQUcsYUFBYSxDQUFDLENBQUMsV0FBVyxFQUFFLFVBQVUsQ0FBQyxDQUFDO2FBQzNELElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUUvQyxNQUFNLE1BQU0sR0FBRyxhQUFhLENBQUMsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFlBQVksRUFBRSxDQUFDLENBQUM7YUFDbkYsSUFBSSxDQUNILEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUMsS0FBSyxFQUFFLEdBQUcsRUFBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEtBQUssSUFBSSxJQUFJLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUM1RixDQUFDO1FBRUosSUFBSSxDQUFDLDBCQUEwQixDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQzlDLElBQUksQ0FBQywwQkFBMEIsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3JGLENBQUM7SUFFTyx1QkFBdUI7UUFDN0IsSUFBSSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsRUFBRTtZQUM3QixJQUFJLENBQUMsbUJBQW1CLEdBQUcsSUFBSSxPQUFPLEVBQWEsQ0FBQztTQUNyRDtJQUNILENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgY29tYmluZUxhdGVzdCwgbWVyZ2UsIE9ic2VydmFibGUsIG9mLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBMaXN0UmFuZ2UgfSBmcm9tICdAYW5ndWxhci9jZGsvY29sbGVjdGlvbnMnO1xuaW1wb3J0IHsgTWF0UGFnaW5hdG9yLCBQYWdlRXZlbnQgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9wYWdpbmF0b3InO1xuaW1wb3J0IHsgTWF0U29ydCwgU29ydCB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL3NvcnQnO1xuaW1wb3J0IHsgTWF0VGFibGVEYXRhU291cmNlIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvdGFibGUnO1xuXG5leHBvcnQgY2xhc3MgVGFibGVWaXJ0dWFsU2Nyb2xsRGF0YVNvdXJjZTxUPiBleHRlbmRzIE1hdFRhYmxlRGF0YVNvdXJjZTxUPiB7XG4gIHB1YmxpYyByZW5kZXJlZFJhbmdlU3RyZWFtOiBTdWJqZWN0PExpc3RSYW5nZT47XG5cbiAgX3VwZGF0ZUNoYW5nZVN1YnNjcmlwdGlvbigpIHtcbiAgICB0aGlzLmluaXRSZW5kZXJlZFJhbmdlU3RyZWFtKCk7XG4gICAgY29uc3QgX3NvcnQ6IE1hdFNvcnQgfCBudWxsID0gdGhpc1snX3NvcnQnXTtcbiAgICBjb25zdCBfcGFnaW5hdG9yOiBNYXRQYWdpbmF0b3IgfCBudWxsID0gdGhpc1snX3BhZ2luYXRvciddO1xuICAgIGNvbnN0IF9pbnRlcm5hbFBhZ2VDaGFuZ2VzOiBTdWJqZWN0PHZvaWQ+ID0gdGhpc1snX2ludGVybmFsUGFnZUNoYW5nZXMnXTtcbiAgICBjb25zdCBfZmlsdGVyOiBCZWhhdmlvclN1YmplY3Q8c3RyaW5nPiA9IHRoaXNbJ19maWx0ZXInXTtcbiAgICBjb25zdCBfcmVuZGVyRGF0YTogQmVoYXZpb3JTdWJqZWN0PFRbXT4gPSB0aGlzWydfcmVuZGVyRGF0YSddO1xuXG4gICAgY29uc3Qgc29ydENoYW5nZTogT2JzZXJ2YWJsZTxTb3J0IHwgbnVsbCB8IHZvaWQ+ID0gX3NvcnQgP1xuICAgICAgbWVyZ2UoX3NvcnQuc29ydENoYW5nZSwgX3NvcnQuaW5pdGlhbGl6ZWQpIGFzIE9ic2VydmFibGU8U29ydCB8IHZvaWQ+IDpcbiAgICAgIG9mKG51bGwpO1xuICAgIGNvbnN0IHBhZ2VDaGFuZ2U6IE9ic2VydmFibGU8UGFnZUV2ZW50IHwgbnVsbCB8IHZvaWQ+ID0gX3BhZ2luYXRvciA/XG4gICAgICBtZXJnZShcbiAgICAgICAgX3BhZ2luYXRvci5wYWdlLFxuICAgICAgICBfaW50ZXJuYWxQYWdlQ2hhbmdlcyxcbiAgICAgICAgX3BhZ2luYXRvci5pbml0aWFsaXplZFxuICAgICAgKSBhcyBPYnNlcnZhYmxlPFBhZ2VFdmVudCB8IHZvaWQ+IDpcbiAgICAgIG9mKG51bGwpO1xuICAgIGNvbnN0IGRhdGFTdHJlYW06IE9ic2VydmFibGU8VFtdPiA9IHRoaXNbJ19kYXRhJ107XG4gICAgY29uc3QgZmlsdGVyZWREYXRhID0gY29tYmluZUxhdGVzdChbZGF0YVN0cmVhbSwgX2ZpbHRlcl0pXG4gICAgICAucGlwZShtYXAoKFtkYXRhXSkgPT4gdGhpcy5fZmlsdGVyRGF0YShkYXRhKSkpO1xuICAgIGNvbnN0IG9yZGVyZWREYXRhID0gY29tYmluZUxhdGVzdChbZmlsdGVyZWREYXRhLCBzb3J0Q2hhbmdlXSlcbiAgICAgIC5waXBlKG1hcCgoW2RhdGFdKSA9PiB0aGlzLl9vcmRlckRhdGEoZGF0YSkpKTtcbiAgICBjb25zdCBwYWdpbmF0ZWREYXRhID0gY29tYmluZUxhdGVzdChbb3JkZXJlZERhdGEsIHBhZ2VDaGFuZ2VdKVxuICAgICAgLnBpcGUobWFwKChbZGF0YV0pID0+IHRoaXMuX3BhZ2VEYXRhKGRhdGEpKSk7XG5cbiAgICBjb25zdCBzbGljZWQgPSBjb21iaW5lTGF0ZXN0KFtwYWdpbmF0ZWREYXRhLCB0aGlzLnJlbmRlcmVkUmFuZ2VTdHJlYW0uYXNPYnNlcnZhYmxlKCldKVxuICAgICAgLnBpcGUoXG4gICAgICAgIG1hcCgoW2RhdGEsIHtzdGFydCwgZW5kfV0pID0+IHN0YXJ0ID09IG51bGwgfHwgZW5kID09IG51bGwgPyBkYXRhIDogZGF0YS5zbGljZShzdGFydCwgZW5kKSlcbiAgICAgICk7XG5cbiAgICB0aGlzLl9yZW5kZXJDaGFuZ2VzU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgdGhpcy5fcmVuZGVyQ2hhbmdlc1N1YnNjcmlwdGlvbiA9IHNsaWNlZC5zdWJzY3JpYmUoZGF0YSA9PiBfcmVuZGVyRGF0YS5uZXh0KGRhdGEpKTtcbiAgfVxuXG4gIHByaXZhdGUgaW5pdFJlbmRlcmVkUmFuZ2VTdHJlYW0oKSB7XG4gICAgaWYgKCF0aGlzLnJlbmRlcmVkUmFuZ2VTdHJlYW0pIHtcbiAgICAgIHRoaXMucmVuZGVyZWRSYW5nZVN0cmVhbSA9IG5ldyBTdWJqZWN0PExpc3RSYW5nZT4oKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==